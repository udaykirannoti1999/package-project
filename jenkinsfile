pipeline {
    agent any
    tools {
        git 'mygit'
    }

    environment {
        S3_BUCKET = "nodemode"
        PACKAGE_ZIP = "package_json.zip"
        PROJECT_DIR = "package-project"
        DOCKER_IMAGE = "node-docker-app"
        DOCKER_CONTAINER = "a93c1046c4dd"
        GIT_REPO = "https://github.com/udaykirannoti1999/package-project.git"
    }

    stages {
        stage('Fetch Latest Package from S3') {
            steps {
                script {
                    sh '''
                    LATEST_FILE=$(aws s3 ls s3://${S3_BUCKET}/ --recursive | sort | tail -n 1 | awk '{print $4}')
                    [ -z "$LATEST_FILE" ] && { echo "No package found in S3. Exiting..."; exit 1; }
                    aws s3 cp s3://${S3_BUCKET}/$LATEST_FILE .
                    unzip -o $LATEST_FILE
                    '''
                }
            }
        }

        stage('Clone Repository if Missing') {
            steps {
                script {
                    if (!fileExists("${PROJECT_DIR}")) {
                        sh "git clone ${GIT_REPO} ${PROJECT_DIR}"
                    }
                }
            }
        }

        stage('Update Repository Dependencies') {
            steps {
                script {
                    sh '''
                    [ -d "${PROJECT_DIR}" ] || { echo "Project directory not found! Exiting..."; exit 1; }
                    mv -f package.json ${PROJECT_DIR}/
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                    cd ${PROJECT_DIR}
                    npm install || { echo "npm install failed! Exiting..."; exit 1; }
                    '''
                }
            }
        }

        stage('Build and Deploy Docker Container') {
            steps {
                script {
                    sh '''
                    cd ${PROJECT_DIR}
                    docker build -t ${DOCKER_IMAGE} . || exit 1
                    docker stop ${DOCKER_CONTAINER} || true
                    docker rm ${DOCKER_CONTAINER} || true
                    docker run -d --name ${DOCKER_CONTAINER} -p 3000:3000 ${DOCKER_IMAGE} || exit 1
                    '''
                }
            }
        }

        stage('List Installed Node Modules') {
            steps {
                script {
                    sh "docker exec ${DOCKER_CONTAINER} npm list --depth=0 || echo 'Failed to list modules!'"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    sh "rm -f $PACKAGE_ZIP"
                }
            }
        }
    }
}
